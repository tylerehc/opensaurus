{"ast":null,"code":"import _toConsumableArray from \"/Users/tylerhudson-crimi/Dropbox/Investments & Projects/BRP/dev/simple/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/tylerhudson-crimi/Dropbox/Investments & Projects/BRP/dev/simple/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport uuid from 'uuid';\nimport { GET_TASKS, ADD_TASK, DELETE_TASK, TASKS_LOADING } from '../actions/types';\nvar initialState = {\n  tasks: [],\n  loading: false\n};\n\nvar isSameById = function isSameById(payload) {\n  return function (_ref) {\n    var id = _ref.id;\n    return payload !== id;\n  };\n};\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_TASKS:\n      return _objectSpread({}, state, {\n        tasks: action.payload,\n        loading: false\n      });\n\n    case ADD_TASK:\n      return _objectSpread({}, state, {\n        tasks: [action.payload].concat(_toConsumableArray(state.tasks))\n      });\n\n    case DELETE_TASK:\n      return _objectSpread({}, state, {\n        tasks: state.tasks.filter(isSameById(action.payload))\n      });\n\n    case TASKS_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/tylerhudson-crimi/Dropbox/Investments & Projects/BRP/dev/simple/client/src/reducers/taskReducer.js"],"names":["uuid","GET_TASKS","ADD_TASK","DELETE_TASK","TASKS_LOADING","initialState","tasks","loading","isSameById","payload","id","state","action","type","filter"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA0CC,aAA1C,QAA8D,kBAA9D;AAGA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE;AAFU,CAArB;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,OAAO;AAAA,SAAI;AAAA,QAAEC,EAAF,QAAEA,EAAF;AAAA,WAAUD,OAAO,KAAKC,EAAtB;AAAA,GAAJ;AAAA,CAA1B;;AAEA,eAAe,YAAuC;AAAA,MAA9BC,KAA8B,uEAAtBN,YAAsB;AAAA,MAARO,MAAQ;;AACpD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKZ,SAAL;AACE,+BACKU,KADL;AAEEL,QAAAA,KAAK,EAAEM,MAAM,CAACH,OAFhB;AAGEF,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,QAAL;AACE,+BACKS,KADL;AAEEL,QAAAA,KAAK,GAAGM,MAAM,CAACH,OAAV,4BAAsBE,KAAK,CAACL,KAA5B;AAFP;;AAIF,SAAKH,WAAL;AACE,+BACKQ,KADL;AAEEL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYQ,MAAZ,CAAmBN,UAAU,CAACI,MAAM,CAACH,OAAR,CAA7B;AAFT;;AAIF,SAAKL,aAAL;AACE,+BACKO,KADL;AAEEJ,QAAAA,OAAO,EAAE;AAFX;;AAIF;AACE,aAAOI,KAAP;AAvBJ;AAyBD","sourcesContent":["import uuid from 'uuid';\nimport {GET_TASKS, ADD_TASK, DELETE_TASK, TASKS_LOADING} from '../actions/types';\n\n\nconst initialState = {\n  tasks: [],\n  loading: false\n}\n\nconst isSameById = payload => ({id}) => payload !== id;\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case GET_TASKS:\n      return {\n        ...state,\n        tasks: action.payload,\n        loading: false\n      };\n    case ADD_TASK:\n      return {\n        ...state,\n        tasks: [action.payload, ...state.tasks]\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter(isSameById(action.payload))\n      };\n    case TASKS_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}